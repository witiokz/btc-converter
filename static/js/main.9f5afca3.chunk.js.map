{"version":3,"sources":["model/Currency.tsx","components/CurrencyInput.tsx","services/currencyService.tsx","components/ConverterForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Currency","CurrencyInput","value","currencyCode","amount","currency","onRemove","Item","label","code","rate_float","Intl","NumberFormat","style","format","undefined","type","onClick","CloseOutlined","getCurrencyPriceDataApiUrl","http","request","a","fetch","response","json","parsedBody","ok","Error","statusText","getCurrencyPriceData","currencyPriceDataResponse","currencyData","currencyModel","chartName","disclaimer","time","currencies","Object","values","bpi","Content","Layout","Option","Select","ConverterForm","Form","useForm","form","defaultCurrencies","filter","i","parseInt","toString","useState","setAmount","setCurrencies","currencyPriceData","setCurrencyPriceData","useEffect","fetchData","onCurrencyRemove","className","offset","layout","name","rules","required","message","onInput","min","map","curencyItem","find","console","log","length","onChange","setFieldsValue","missedCurrencies","width","includes","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f5afca3.chunk.js","sourcesContent":["export enum Currency {\r\n  USD,\r\n  GBP,\r\n  EUR,\r\n}\r\n","import React from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { CurrencyItem } from \"../model/CurrencyItem\";\r\n\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\n\r\ntype CurrencyInputProps = {\r\n  amount: number;\r\n  currency: CurrencyItem;\r\n  onRemove: (currencyCode: string) => void;\r\n};\r\n\r\nconst moneyFormatter = (value: number, currencyCode: string) => {\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: currencyCode,\r\n  }).format(value);\r\n};\r\n\r\nconst CurrencyInput = ({ amount, currency, onRemove }: CurrencyInputProps) => {\r\n  return (\r\n    <>\r\n      <Form.Item label={currency.code}>\r\n        <Input\r\n          value={\r\n            currency.rate_float && amount ? moneyFormatter(amount * currency.rate_float, currency.code) : undefined\r\n          }\r\n        />\r\n      </Form.Item>\r\n\r\n      <Button type=\"link\" onClick={() => onRemove(currency.code)}>\r\n        <CloseOutlined />\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrencyInput;\r\n","import { CurrencyModel } from \"../model/CurrencyModel\";\r\nimport { CurrencyResponse } from \"../model/CurrencyResponse\";\r\n\r\nconst baseApiUrl = \"https://api.coindesk.com\";\r\nexport const getCurrencyPriceDataApiUrl = `${baseApiUrl}/v1/bpi/currentprice.json`;\r\n\r\ninterface HttpResponse<T> extends Response {\r\n  parsedBody?: T;\r\n}\r\n\r\nexport const http = async <T extends unknown>(request: RequestInfo): Promise<HttpResponse<T>> => {\r\n  const response: HttpResponse<T> = await fetch(request);\r\n\r\n  try {\r\n    response.parsedBody = await response.json();\r\n  } catch (ex) {}\r\n\r\n  if (!response.ok) {\r\n    throw new Error(response.statusText);\r\n  }\r\n  return response;\r\n};\r\n\r\nexport const getCurrencyPriceData = async (): Promise<CurrencyModel | null> => {\r\n  const currencyPriceDataResponse = await http<CurrencyResponse>(getCurrencyPriceDataApiUrl);\r\n  const currencyData = currencyPriceDataResponse.parsedBody;\r\n\r\n  if (currencyData) {\r\n    const currencyModel: CurrencyModel = {\r\n      chartName: currencyData.chartName,\r\n      disclaimer: currencyData.disclaimer,\r\n      time: currencyData.time,\r\n      currencies: Object.values(currencyData.bpi),\r\n    };\r\n\r\n    return currencyModel;\r\n  }\r\n\r\n  return null;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Form, Select, InputNumber, Layout, Row, Col } from \"antd\";\r\nimport CurrencyInput from \"./CurrencyInput\";\r\n\r\nimport { getCurrencyPriceData } from \"../services/currencyService\";\r\nimport { Currency } from \"../model/Currency\";\r\nimport { CurrencyModel } from \"../model/CurrencyModel\";\r\nimport { CurrencyItem } from \"../model/CurrencyItem\";\r\n\r\nconst { Content } = Layout;\r\nconst { Option } = Select;\r\n\r\nconst ConverterForm = () => {\r\n  const [form] = Form.useForm();\r\n\r\n  const defaultCurrencies = Object.values(Currency).filter((i) => !(parseInt(i.toString()) >= 0));\r\n\r\n  const [amount, setAmount] = useState<number>(0);\r\n  const [currencies, setCurrencies] = useState<(string | Currency)[]>(defaultCurrencies);\r\n  const [currencyPriceData, setCurrencyPriceData] = useState<CurrencyModel>({} as CurrencyModel);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const currencyPriceDataResponse = await getCurrencyPriceData();\r\n\r\n      if (currencyPriceDataResponse) {\r\n        setCurrencyPriceData(currencyPriceDataResponse);\r\n      }\r\n    }\r\n\r\n    //  setInterval(async () => {\r\n    fetchData();\r\n    //}, 60000);\r\n  }, []);\r\n\r\n  const onCurrencyRemove = (currencyCode: string) => {\r\n    setCurrencies([...currencies.filter((i) => i !== currencyCode)]);\r\n  };\r\n\r\n  const onCurrencyAdd = (value: Currency) => {\r\n    setCurrencies([...currencies, value]);\r\n\r\n    form.setFieldsValue({\r\n      missedCurrencies: null,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Layout className=\"btc-wrapper\">\r\n      <Content>\r\n        <Row>\r\n          <Col offset={8}>\r\n            <Form layout=\"inline\" form={form}>\r\n              <Form.Item\r\n                label=\"Btc Number\"\r\n                name=\"btcNumber\"\r\n                rules={[{ required: true, message: \"Please input BFC number !\" }]}\r\n              >\r\n                <InputNumber onInput={(value) => (value ? setAmount(parseInt(value)) : value)} min={0} />\r\n              </Form.Item>\r\n              {currencyPriceData?.currencies &&\r\n                currencies.map((currency: string | Currency) => {\r\n                  const curencyItem = currencyPriceData.currencies.find((i) => i.code === currency) ?? {};\r\n                  console.log(\"curencyItem\", curencyItem);\r\n                  return (\r\n                    <CurrencyInput\r\n                      key={currency}\r\n                      amount={amount}\r\n                      currency={curencyItem as CurrencyItem}\r\n                      onRemove={onCurrencyRemove}\r\n                    />\r\n                  );\r\n                })}\r\n\r\n              {currencies.length !== defaultCurrencies.length && (\r\n                <Form.Item name=\"missedCurrencies\" label=\"Add currency\">\r\n                  <Select onChange={onCurrencyAdd} style={{ width: \"100px\" }}>\r\n                    {defaultCurrencies\r\n                      .filter((i) => !currencies.includes(i))\r\n                      .map((item) => (\r\n                        <Option key={item} value={item}>\r\n                          {item}\r\n                        </Option>\r\n                      ))}\r\n                  </Select>\r\n                </Form.Item>\r\n              )}\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ConverterForm;\r\n","import React from \"react\";\n\nimport ConverterForm from \"./components/ConverterForm\";\n\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <ConverterForm />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}